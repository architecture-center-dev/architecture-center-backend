# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Image {
  originalname: String!
  newFilename: String!
}

type User {
  id: String!
  name: String
  lastname: String
  email: String!
  firstAccess: Boolean!
  password: String!
  image: Image!
}

type OauthTOken {
  accessToken: String
}

type Solution {
  solution_id: String!
  name: String!
  customer: String!
  project: String!
  market: String!
  year_month: String!
  description: String!
  big_picture: String
  tags: [String!]
  team_members: [String!]
  created_at: DateTime!
  updated_at: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Canvas {
  canvas_id: String!
  solution_id: String!
  dependencies: [String!]
  technology: [String!]
  patterns: [String!]
  problem: [String!]
  func_requirement: [String!]
  non_func_requirement: [String!]
  context: [String!]
  difficulties: [String!]
  advantages: [String!]
  created_at: DateTime!
  updated_at: DateTime!
}

type Attachment {
  attachment_id: String!
  url: String!
  filename: String!
  encoding: String!
  mimetype: String!
  created_at: DateTime!
  updated_at: DateTime!
}

type Query {
  users: [User!]!
  solution(search: String): [Solution!]!
  solutionById(solution_id: String!): Solution
  canvasBySolutionId(solution_id: String!): Canvas
}

type Mutation {
  login(password: String!, username: String!): OauthTOken
  createTagSolution(tag: String!, solution_id: String!): Solution!
  createTeamMemberSolution(team_member: String!, solution_id: String!): Solution!
  singleFileUpload(solution_id: String!, file: Upload!): Attachment
  createCanvas(canvas: CreateCanvasDto!): Canvas!
  createItemCanvas(value: String!, item: String!, canvas_id: String!): Canvas!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateCanvasDto {
  solution_id: String!
  dependencies: [String!]
  technology: [String!]
  patterns: [String!]
  problem: [String!]
  func_requirement: [String!]
  non_func_requirement: [String!]
  context: [String!]
  difficulties: [String!]
  advantages: [String!]
}
